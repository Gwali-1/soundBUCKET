from sqlalchemy import except_
from ..async_database import SessionLocal
from .. import models
from datetime import time 





def get_token_from_db(user_id):
    db = SessionLocal()
    #database query
    user = db.query(models.User).filter(models.User.id  == user_id).first()
    if user:
        token = user.token
        db.close()
        return {
            'access_token': token[0],
            'expires_at': token[2],
            'refresh_token': token[1]
        }
    else:
        db.close()
        return None



def save_token_to_db(user_id, access_token, expires_at, refresh_token):
    db = SessionLocal()
    try:
        new_token = models.Tokens(token=access_token, refresh_token=refresh_token, expires_at=expires_at)
        db.add(new_token)
        db.commit()
    except:
        db.rollback()
    finally:
        db.close()



def cache_handler(user_id, token_info = None):
    if token_info is None:
        
        token_data = get_token_from_db(user_id)
        if token_data and token_data['expires_at'] > time.time():
            return token_data['access_token']
        else:
        new_token_data = get_new_token(token_data["refresh_token"])
        save_token_to_db(user_id, new_token_data['access_token'], new_token_data['expires_at'], new_token_data['refresh_token'])
        return new_token_data['access_token']

    save_token_to_db(user_id, token_info["access_token"], token_info["refresh_token"], token_info["expires_at"])








def get_new_token(refresh_token):
    sp_oauth = SpotifyOAuth(client_id='your_client_id,
    client_secret='your_client_secret', redirect_uri='your_redirect_uri', scope='your_scope')
    token_info = sp_oauth.refresh_access_token(refresh_token)
    return {
        'access_token': token_info['access_token'],
        'expires_at': token_info['expires_at'],
        'refresh_token': token_info['refresh_token']
    }
